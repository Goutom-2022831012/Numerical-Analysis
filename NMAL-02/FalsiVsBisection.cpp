#include <bits/stdc++.h>
using namespace std;

double f(double x) {
    return 4 * x * x + 3 * x - 3;
}
const double true_root = (-3 + sqrt(57)) / 8.0;

void bisection(double a, double b, double tol = 1e-4) {
    if (f(a) * f(b) >= 0) {
        cout << "Invalid.\n";
        return;
    }
    cout << "\nBisection Method:\n";
    cout << fixed << setprecision(6);
    cout << "Iteration\ta\t\tb\t\tc\t\tTPRE (%)\n";
    int i = 0;
    double c = (a + b) / 2.0;
    while (fabs(a-b) > tol) {
        double tpre = fabs((true_root - c) / true_root) * 100;
        cout << i << "\t" << a << "\t" << b << "\t" << c << "\t" << tpre << endl;
        if(f(c)==0) break ; 
        else if (f(a) * f(c) < 0)
            b = c;
        else
            a = c;
           c = (a + b) / 2.0;
        i++;
    }
}

void falsePosition(double a,double b,double tol =1e-4) {
    if (f(a) * f(b) >= 0) {
        cout << "Invalid.\n";
        return;
    }
    cout << "\nFalse Position Method:\n";
    cout << fixed << setprecision(6);
    cout << "Iteration\ta\t\tb\t\tc\t\tTPRE (%)\n";
    int i = 0;
    double c = (a * f(b) - b * f(a)) / (f(b) - f(a));
    while (fabs(a-b) > tol) {
        double tpre = fabs((true_root -c) /true_root) *100;
        cout << i << "\t" << a << "\t" << b << "\t" << c << "\t" << tpre << endl;
        if(f(c)==0) break ; 
       else if (f(a) * f(c) < 0)
            b = c;
        else
            a = c;

        c = (a *f(b)- b *f(a)) / (f(b)- f(a));
        i++;
    }
}

int main() {
    double a = 0.0, b = 1.0;
    bisection(a, b);
    falsePosition(a, b);
    return 0;
}
/*
Bisection Method:
Iteration       a               b               c               TPRE (%)
0       0.000000        1.000000        0.500000        12.084713
1       0.500000        1.000000        0.750000        31.872930
2       0.500000        0.750000        0.625000        9.894109
3       0.500000        0.625000        0.562500        1.095302
4       0.562500        0.625000        0.593750        4.399403
5       0.562500        0.593750        0.578125        1.652051
6       0.562500        0.578125        0.570312        0.278374
7       0.562500        0.570312        0.566406        0.408464
8       0.566406        0.570312        0.568359        0.065045
9       0.568359        0.570312        0.569336        0.106665
10      0.568359        0.569336        0.568848        0.020810
11      0.568359        0.568848        0.568604        0.022118
12      0.568604        0.568848        0.568726        0.000654
13      0.568726        0.568848        0.568787        0.010078

False Position Method:
Iteration       a               b               c               TPRE (%)
0       0.000000        1.000000        0.428571        24.644040
1       0.428571        1.000000        0.540984        4.878542
2       0.540984        1.000000        0.563506        0.918371
3       0.563506        1.000000        0.567756        0.171197
4       0.567756        1.000000        0.568548        0.031855
5       0.568548        1.000000        0.568696        0.005925
6       0.568696        1.000000        0.568723        0.001102
7       0.568723        1.000000        0.568728        0.000205
8       0.568728        1.000000        0.568729        0.000038
9       0.568729        1.000000        0.568729        0.000007
10      0.568729        1.000000        0.568729        0.000001
11      0.568729        1.000000        0.568729        0.000000
12      0.568729        1.000000        0.568729        0.000000
13      0.568729        1.000000        0.568729        0.000000
14      0.568729        1.000000        0.568729        0.000000
15      0.568729        1.000000        0.568729        0.000000
16      0.568729        1.000000        0.568729        0.000000
17      0.568729        1.000000        0.568729        0.000000
18      0.568729        1.000000        0.568729        0.000000
19      0.568729        1.000000        0.568729        0.000000
20      0.568729        1.000000        0.568729        0.000000
21      0.568729        1.000000        0.568729        0.000000
22      0.568729        1.000000        0.568729        0.000000
*/